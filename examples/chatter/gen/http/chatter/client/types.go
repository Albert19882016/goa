// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// chatter HTTP client types
//
// Command:
// $ goa gen goa.design/goa/examples/chatter/design -o
// $(GOPATH)/src/goa.design/goa/examples/chatter

package client

import (
	goa "goa.design/goa"
	chattersvc "goa.design/goa/examples/chatter/gen/chatter"
	chattersvcviews "goa.design/goa/examples/chatter/gen/chatter/views"
)

// SummaryResponseBody is the type of the "chatter" service "summary" endpoint
// HTTP response body.
type SummaryResponseBody []*ChatSummaryResponseBody

// HistoryResponseBody is the type of the "chatter" service "history" endpoint
// HTTP response body.
type HistoryResponseBody struct {
	// Message sent to the server
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Length of the message sent
	Length *int `form:"length,omitempty" json:"length,omitempty" xml:"length,omitempty"`
	// Time at which the message was sent
	SentAt *string `form:"sent_at,omitempty" json:"sent_at,omitempty" xml:"sent_at,omitempty"`
}

// LoginunauthorizedResponseBody is the type of the "chatter" service "login"
// endpoint HTTP response body for the "unauthorized" error.
type LoginunauthorizedResponseBody string

// EchoerinvalidScopesResponseBody is the type of the "chatter" service
// "echoer" endpoint HTTP response body for the "invalid-scopes" error.
type EchoerinvalidScopesResponseBody string

// EchoerunauthorizedResponseBody is the type of the "chatter" service "echoer"
// endpoint HTTP response body for the "unauthorized" error.
type EchoerunauthorizedResponseBody string

// ListenerinvalidScopesResponseBody is the type of the "chatter" service
// "listener" endpoint HTTP response body for the "invalid-scopes" error.
type ListenerinvalidScopesResponseBody string

// ListenerunauthorizedResponseBody is the type of the "chatter" service
// "listener" endpoint HTTP response body for the "unauthorized" error.
type ListenerunauthorizedResponseBody string

// SummaryinvalidScopesResponseBody is the type of the "chatter" service
// "summary" endpoint HTTP response body for the "invalid-scopes" error.
type SummaryinvalidScopesResponseBody string

// SummaryunauthorizedResponseBody is the type of the "chatter" service
// "summary" endpoint HTTP response body for the "unauthorized" error.
type SummaryunauthorizedResponseBody string

// HistoryinvalidScopesResponseBody is the type of the "chatter" service
// "history" endpoint HTTP response body for the "invalid-scopes" error.
type HistoryinvalidScopesResponseBody string

// HistoryunauthorizedResponseBody is the type of the "chatter" service
// "history" endpoint HTTP response body for the "unauthorized" error.
type HistoryunauthorizedResponseBody string

// ChatSummaryResponseBody is used to define fields on response body types.
type ChatSummaryResponseBody struct {
	// Message sent to the server
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Length of the message sent
	Length *int `form:"length,omitempty" json:"length,omitempty" xml:"length,omitempty"`
	// Time at which the message was sent
	SentAt *string `form:"sent_at,omitempty" json:"sent_at,omitempty" xml:"sent_at,omitempty"`
}

// NewLoginUnauthorized builds a chatter service login endpoint unauthorized
// error.
func NewLoginUnauthorized(body LoginunauthorizedResponseBody) chattersvc.Unauthorized {
	v := chattersvc.Unauthorized(body)
	return v
}

// NewEchoerInvalidScopes builds a chatter service echoer endpoint
// invalid-scopes error.
func NewEchoerInvalidScopes(body EchoerinvalidScopesResponseBody) chattersvc.InvalidScopes {
	v := chattersvc.InvalidScopes(body)
	return v
}

// NewEchoerUnauthorized builds a chatter service echoer endpoint unauthorized
// error.
func NewEchoerUnauthorized(body EchoerunauthorizedResponseBody) chattersvc.Unauthorized {
	v := chattersvc.Unauthorized(body)
	return v
}

// NewListenerInvalidScopes builds a chatter service listener endpoint
// invalid-scopes error.
func NewListenerInvalidScopes(body ListenerinvalidScopesResponseBody) chattersvc.InvalidScopes {
	v := chattersvc.InvalidScopes(body)
	return v
}

// NewListenerUnauthorized builds a chatter service listener endpoint
// unauthorized error.
func NewListenerUnauthorized(body ListenerunauthorizedResponseBody) chattersvc.Unauthorized {
	v := chattersvc.Unauthorized(body)
	return v
}

// NewSummaryChatSummaryCollectionOK builds a "chatter" service "summary"
// endpoint result from a HTTP "OK" response.
func NewSummaryChatSummaryCollectionOK(body SummaryResponseBody) chattersvcviews.ChatSummaryCollectionView {
	v := make([]*chattersvcviews.ChatSummaryView, len(body))
	for i, val := range body {
		v[i] = &chattersvcviews.ChatSummaryView{
			Message: val.Message,
			Length:  val.Length,
			SentAt:  val.SentAt,
		}
	}
	return v
}

// NewSummaryInvalidScopes builds a chatter service summary endpoint
// invalid-scopes error.
func NewSummaryInvalidScopes(body SummaryinvalidScopesResponseBody) chattersvc.InvalidScopes {
	v := chattersvc.InvalidScopes(body)
	return v
}

// NewSummaryUnauthorized builds a chatter service summary endpoint
// unauthorized error.
func NewSummaryUnauthorized(body SummaryunauthorizedResponseBody) chattersvc.Unauthorized {
	v := chattersvc.Unauthorized(body)
	return v
}

// NewHistoryChatSummaryOK builds a "chatter" service "history" endpoint result
// from a HTTP "OK" response.
func NewHistoryChatSummaryOK(body *HistoryResponseBody) *chattersvcviews.ChatSummaryView {
	v := &chattersvcviews.ChatSummaryView{
		Message: body.Message,
		Length:  body.Length,
		SentAt:  body.SentAt,
	}
	return v
}

// NewHistoryInvalidScopes builds a chatter service history endpoint
// invalid-scopes error.
func NewHistoryInvalidScopes(body HistoryinvalidScopesResponseBody) chattersvc.InvalidScopes {
	v := chattersvc.InvalidScopes(body)
	return v
}

// NewHistoryUnauthorized builds a chatter service history endpoint
// unauthorized error.
func NewHistoryUnauthorized(body HistoryunauthorizedResponseBody) chattersvc.Unauthorized {
	v := chattersvc.Unauthorized(body)
	return v
}

// Validate runs the validations defined on ChatSummaryResponseBody
func (body *ChatSummaryResponseBody) Validate() (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.SentAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.sent_at", *body.SentAt, goa.FormatDateTime))
	}
	return
}
