// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// chatter HTTP server types
//
// Command:
// $ goa gen goa.design/goa/examples/chatter/design -o
// $(GOPATH)/src/goa.design/goa/examples/chatter

package server

import (
	goa "goa.design/goa"
	chattersvc "goa.design/goa/examples/chatter/gen/chatter"
	chattersvcviews "goa.design/goa/examples/chatter/gen/chatter/views"
)

// ChatSummaryResponseBodyCollection is the type of the "chatter" service
// "summary" endpoint HTTP response body.
type ChatSummaryResponseBodyCollection []*ChatSummaryResponseBody

// HistoryResponseBodyTiny is the type of the "chatter" service "history"
// endpoint HTTP response body.
type HistoryResponseBodyTiny struct {
	// Message sent to the server
	Message string `form:"message" json:"message" xml:"message"`
}

// HistoryResponseBody is the type of the "chatter" service "history" endpoint
// HTTP response body.
type HistoryResponseBody struct {
	// Message sent to the server
	Message string `form:"message" json:"message" xml:"message"`
	// Length of the message sent
	Length *int `form:"length,omitempty" json:"length,omitempty" xml:"length,omitempty"`
	// Time at which the message was sent
	SentAt *string `form:"sent_at,omitempty" json:"sent_at,omitempty" xml:"sent_at,omitempty"`
}

// LoginunauthorizedResponseBody is the type of the "chatter" service "login"
// endpoint HTTP response body for the "unauthorized" error.
type LoginunauthorizedResponseBody string

// EchoerinvalidScopesResponseBody is the type of the "chatter" service
// "echoer" endpoint HTTP response body for the "invalid-scopes" error.
type EchoerinvalidScopesResponseBody string

// EchoerunauthorizedResponseBody is the type of the "chatter" service "echoer"
// endpoint HTTP response body for the "unauthorized" error.
type EchoerunauthorizedResponseBody string

// ListenerinvalidScopesResponseBody is the type of the "chatter" service
// "listener" endpoint HTTP response body for the "invalid-scopes" error.
type ListenerinvalidScopesResponseBody string

// ListenerunauthorizedResponseBody is the type of the "chatter" service
// "listener" endpoint HTTP response body for the "unauthorized" error.
type ListenerunauthorizedResponseBody string

// SummaryinvalidScopesResponseBody is the type of the "chatter" service
// "summary" endpoint HTTP response body for the "invalid-scopes" error.
type SummaryinvalidScopesResponseBody string

// SummaryunauthorizedResponseBody is the type of the "chatter" service
// "summary" endpoint HTTP response body for the "unauthorized" error.
type SummaryunauthorizedResponseBody string

// HistoryinvalidScopesResponseBody is the type of the "chatter" service
// "history" endpoint HTTP response body for the "invalid-scopes" error.
type HistoryinvalidScopesResponseBody string

// HistoryunauthorizedResponseBody is the type of the "chatter" service
// "history" endpoint HTTP response body for the "unauthorized" error.
type HistoryunauthorizedResponseBody string

// ChatSummaryResponseBody is used to define fields on response body types.
type ChatSummaryResponseBody struct {
	// Message sent to the server
	Message string `form:"message" json:"message" xml:"message"`
	// Length of the message sent
	Length *int `form:"length,omitempty" json:"length,omitempty" xml:"length,omitempty"`
	// Time at which the message was sent
	SentAt *string `form:"sent_at,omitempty" json:"sent_at,omitempty" xml:"sent_at,omitempty"`
}

// NewChatSummaryResponseBodyCollection builds the HTTP response body from the
// result of the "summary" endpoint of the "chatter" service.
func NewChatSummaryResponseBodyCollection(res chattersvcviews.ChatSummaryCollectionView) ChatSummaryResponseBodyCollection {
	body := make([]*ChatSummaryResponseBody, len(res))
	for i, val := range res {
		body[i] = &ChatSummaryResponseBody{
			Message: *val.Message,
			Length:  val.Length,
			SentAt:  val.SentAt,
		}
	}
	return body
}

// NewHistoryResponseBodyTiny builds the HTTP response body from the result of
// the "history" endpoint of the "chatter" service.
func NewHistoryResponseBodyTiny(res *chattersvcviews.ChatSummaryView) *HistoryResponseBodyTiny {
	body := &HistoryResponseBodyTiny{
		Message: *res.Message,
	}
	return body
}

// NewHistoryResponseBody builds the HTTP response body from the result of the
// "history" endpoint of the "chatter" service.
func NewHistoryResponseBody(res *chattersvcviews.ChatSummaryView) *HistoryResponseBody {
	body := &HistoryResponseBody{
		Message: *res.Message,
		Length:  res.Length,
		SentAt:  res.SentAt,
	}
	return body
}

// NewLoginunauthorizedResponseBody builds the HTTP response body from the
// result of the "login" endpoint of the "chatter" service.
func NewLoginunauthorizedResponseBody(res chattersvc.Unauthorized) LoginunauthorizedResponseBody {
	body := LoginunauthorizedResponseBody(res)
	return body
}

// NewEchoerinvalidScopesResponseBody builds the HTTP response body from the
// result of the "echoer" endpoint of the "chatter" service.
func NewEchoerinvalidScopesResponseBody(res chattersvc.InvalidScopes) EchoerinvalidScopesResponseBody {
	body := EchoerinvalidScopesResponseBody(res)
	return body
}

// NewEchoerunauthorizedResponseBody builds the HTTP response body from the
// result of the "echoer" endpoint of the "chatter" service.
func NewEchoerunauthorizedResponseBody(res chattersvc.Unauthorized) EchoerunauthorizedResponseBody {
	body := EchoerunauthorizedResponseBody(res)
	return body
}

// NewListenerinvalidScopesResponseBody builds the HTTP response body from the
// result of the "listener" endpoint of the "chatter" service.
func NewListenerinvalidScopesResponseBody(res chattersvc.InvalidScopes) ListenerinvalidScopesResponseBody {
	body := ListenerinvalidScopesResponseBody(res)
	return body
}

// NewListenerunauthorizedResponseBody builds the HTTP response body from the
// result of the "listener" endpoint of the "chatter" service.
func NewListenerunauthorizedResponseBody(res chattersvc.Unauthorized) ListenerunauthorizedResponseBody {
	body := ListenerunauthorizedResponseBody(res)
	return body
}

// NewSummaryinvalidScopesResponseBody builds the HTTP response body from the
// result of the "summary" endpoint of the "chatter" service.
func NewSummaryinvalidScopesResponseBody(res chattersvc.InvalidScopes) SummaryinvalidScopesResponseBody {
	body := SummaryinvalidScopesResponseBody(res)
	return body
}

// NewSummaryunauthorizedResponseBody builds the HTTP response body from the
// result of the "summary" endpoint of the "chatter" service.
func NewSummaryunauthorizedResponseBody(res chattersvc.Unauthorized) SummaryunauthorizedResponseBody {
	body := SummaryunauthorizedResponseBody(res)
	return body
}

// NewHistoryinvalidScopesResponseBody builds the HTTP response body from the
// result of the "history" endpoint of the "chatter" service.
func NewHistoryinvalidScopesResponseBody(res chattersvc.InvalidScopes) HistoryinvalidScopesResponseBody {
	body := HistoryinvalidScopesResponseBody(res)
	return body
}

// NewHistoryunauthorizedResponseBody builds the HTTP response body from the
// result of the "history" endpoint of the "chatter" service.
func NewHistoryunauthorizedResponseBody(res chattersvc.Unauthorized) HistoryunauthorizedResponseBody {
	body := HistoryunauthorizedResponseBody(res)
	return body
}

// NewLoginPayload builds a chatter service login endpoint payload.
func NewLoginPayload() *chattersvc.LoginPayload {
	return &chattersvc.LoginPayload{}
}

// NewEchoerPayload builds a chatter service echoer endpoint payload.
func NewEchoerPayload(token string) *chattersvc.EchoerPayload {
	return &chattersvc.EchoerPayload{
		Token: token,
	}
}

// NewListenerPayload builds a chatter service listener endpoint payload.
func NewListenerPayload(token string) *chattersvc.ListenerPayload {
	return &chattersvc.ListenerPayload{
		Token: token,
	}
}

// NewSummaryPayload builds a chatter service summary endpoint payload.
func NewSummaryPayload(token string) *chattersvc.SummaryPayload {
	return &chattersvc.SummaryPayload{
		Token: token,
	}
}

// NewHistoryPayload builds a chatter service history endpoint payload.
func NewHistoryPayload(view *string, token string) *chattersvc.HistoryPayload {
	return &chattersvc.HistoryPayload{
		View:  view,
		Token: token,
	}
}

// Validate runs the validations defined on ChatSummaryResponseBody
func (body *ChatSummaryResponseBody) Validate() (err error) {
	if body.SentAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.sent_at", *body.SentAt, goa.FormatDateTime))
	}
	return
}
