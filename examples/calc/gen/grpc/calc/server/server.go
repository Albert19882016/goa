// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// calc GRPC server
//
// Command:
// $ goa gen goa.design/goa/examples/calc/design -o
// $(GOPATH)/src/goa.design/goa/examples/calc

package server

import (
	"context"

	calcsvc "goa.design/goa/examples/calc/gen/calc"
	calcpb "goa.design/goa/examples/calc/gen/grpc/calc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// Server implements the calcpb.CalcServer interface.
type Server struct {
	endpoints *calcsvc.Endpoints
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the calc service endpoints.
func New(e *calcsvc.Endpoints) *Server {
	return &Server{e}
}

// Add implements the "Add" method in calcpb.CalcServer interface.
func (s *Server) Add(ctx context.Context, message *calcpb.AddRequest) (*calcpb.AddResponse, error) {
	p, err := DecodeAddRequest(ctx, message)
	if err != nil {
		return nil, status.Error(codes.InvalidArgument, err.Error())
	}
	payload := p.(*calcsvc.AddPayload)
	v, err := s.endpoints.Add(ctx, payload)
	if err != nil {
		return nil, err
	}
	r, err := EncodeAddResponse(ctx, v)
	if err != nil {
		return nil, status.Error(codes.Internal, err.Error())
	}
	return r.(*calcpb.AddResponse), nil
}
