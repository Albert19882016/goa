// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// calc GRPC server
//
// Command:
// $ goa gen goa.design/goa/examples/calc/design -o
// $(GOPATH)/src/goa.design/goa/examples/calc

package server

import (
	"context"

	"goa.design/goa"
	calcsvc "goa.design/goa/examples/calc/gen/calc"
	calcpb "goa.design/goa/examples/calc/gen/grpc/calc"
	goagrpc "goa.design/goa/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// Server implements the calcpb.CalcServer interface.
type Server struct {
	add goagrpc.UnaryHandler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the calc service endpoints.
func New(e *calcsvc.Endpoints, h goagrpc.UnaryHandler) *Server {
	return &Server{
		add: NewAddHandler(e.Add, h),
	}
}

// Add implements the "Add" method in calcpb.CalcServer interface.
func (s *Server) Add(ctx context.Context, message *calcpb.AddRequest) (*calcpb.AddResponse, error) {
	resp, err := s.add.Serve(ctx, message)
	if err != nil {
		return nil, status.Error(codes.Internal, err.Error())
	}
	return resp.(*calcpb.AddResponse), nil
}

// NewAddHandler creates a gRPC handler which serves the "calc" service "add"
// endpoint.
func NewAddHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeAddRequest, EncodeAddResponse)
	}
	return h
}
