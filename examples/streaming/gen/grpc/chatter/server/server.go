// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// chatter GRPC server
//
// Command:
// $ goa gen goa.design/goa/examples/streaming/design -o
// $(GOPATH)/src/goa.design/goa/examples/streaming

package server

import (
	"context"

	chattersvc "goa.design/goa/examples/streaming/gen/chatter"
	chatterpb "goa.design/goa/examples/streaming/gen/grpc/chatter"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// Server implements the chatterpb.ChatterServer interface.
type Server struct {
	endpoints *chattersvc.Endpoints
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// echoerServerStream implements the chattersvc.EchoerServerStream.%!s(MISSING)
// interface.
type echoerServerStream struct {
	stream chatterpb.Chatter_EchoerServer
}

// listenerServerStream implements the
// chattersvc.ListenerServerStream.%!s(MISSING) interface.
type listenerServerStream struct {
	stream chatterpb.Chatter_ListenerServer
}

// summaryServerStream implements the
// chattersvc.SummaryServerStream.%!s(MISSING) interface.
type summaryServerStream struct {
	stream chatterpb.Chatter_SummaryServer
}

// historyServerStream implements the
// chattersvc.HistoryServerStream.%!s(MISSING) interface.
type historyServerStream struct {
	stream chatterpb.Chatter_HistoryServer
}

// New instantiates the server struct with the chatter service endpoints.
func New(e *chattersvc.Endpoints) *Server {
	return &Server{e}
}

// Login implements the "Login" method in chatterpb.ChatterServer interface.
func (s *Server) Login(ctx context.Context, message *chatterpb.LoginRequest) (*chatterpb.LoginResponse, error) {
	payload, err := DecodeLoginRequest(ctx, message)
	if err != nil {
		return nil, status.Error(codes.InvalidArgument, err.Error())
	}
	v, err := s.endpoints.Login(ctx, payload)
	if err != nil {
		en, ok := err.(ErrorNamer)
		if !ok {
			return nil, err
		}
		switch en.ErrorName() {
		case "unauthorized":
			return nil, status.Error(codes.Unauthenticated, err.Error())
		}
	}
	return EncodeLoginResponse(ctx, v), nil
}

// Echoer implements the "Echoer" method in chatterpb.ChatterServer interface.
func (s *Server) Echoer(stream chatterpb.Chatter_EchoerServer) error {
	payload, err := DecodeEchoerRequest(stream)
	if err != nil {
		return status.Error(codes.InvalidArgument, err.Error())
	}
	ep := &chattersvc.EchoerEndpointInput{
		Stream:  &echoerServerStream{stream: stream},
		Payload: payload,
	}
	_, err = s.endpoints.Echoer(stream.Context(), ep)
	if err != nil {
		en, ok := err.(ErrorNamer)
		if !ok {
			return err
		}
		switch en.ErrorName() {
		case "unauthorized":
			return status.Error(codes.Unauthenticated, err.Error())
		case "invalid-scopes":
			return status.Error(codes.Unauthenticated, err.Error())
		}
	}
	return nil
}

// Listener implements the "Listener" method in chatterpb.ChatterServer
// interface.
func (s *Server) Listener(stream chatterpb.Chatter_ListenerServer) error {
	payload, err := DecodeListenerRequest(stream)
	if err != nil {
		return status.Error(codes.InvalidArgument, err.Error())
	}
	ep := &chattersvc.ListenerEndpointInput{
		Stream:  &listenerServerStream{stream: stream},
		Payload: payload,
	}
	_, err = s.endpoints.Listener(stream.Context(), ep)
	if err != nil {
		en, ok := err.(ErrorNamer)
		if !ok {
			return err
		}
		switch en.ErrorName() {
		case "unauthorized":
			return status.Error(codes.Unauthenticated, err.Error())
		case "invalid-scopes":
			return status.Error(codes.Unauthenticated, err.Error())
		}
	}
	return nil
}

// Summary implements the "Summary" method in chatterpb.ChatterServer interface.
func (s *Server) Summary(stream chatterpb.Chatter_SummaryServer) error {
	payload, err := DecodeSummaryRequest(stream)
	if err != nil {
		return status.Error(codes.InvalidArgument, err.Error())
	}
	ep := &chattersvc.SummaryEndpointInput{
		Stream:  &summaryServerStream{stream: stream},
		Payload: payload,
	}
	_, err = s.endpoints.Summary(stream.Context(), ep)
	if err != nil {
		en, ok := err.(ErrorNamer)
		if !ok {
			return err
		}
		switch en.ErrorName() {
		case "unauthorized":
			return status.Error(codes.Unauthenticated, err.Error())
		case "invalid-scopes":
			return status.Error(codes.Unauthenticated, err.Error())
		}
	}
	return nil
}

// History implements the "History" method in chatterpb.ChatterServer interface.
func (s *Server) History(message *chatterpb.HistoryRequest, stream chatterpb.Chatter_HistoryServer) error {
	payload, err := DecodeHistoryRequest(stream, message)
	if err != nil {
		return status.Error(codes.InvalidArgument, err.Error())
	}
	ep := &chattersvc.HistoryEndpointInput{
		Stream:  &historyServerStream{stream: stream},
		Payload: payload,
	}
	_, err = s.endpoints.History(stream.Context(), ep)
	if err != nil {
		en, ok := err.(ErrorNamer)
		if !ok {
			return err
		}
		switch en.ErrorName() {
		case "unauthorized":
			return status.Error(codes.Unauthenticated, err.Error())
		case "invalid-scopes":
			return status.Error(codes.Unauthenticated, err.Error())
		}
	}
	return nil
}

// Send streams instances of "string" to the "echoer" endpoint gRPC stream.
func (s *echoerServerStream) Send(res string) error {
	v := NewEchoerResponse(res)
	return s.stream.Send(v)
}

// Recv reads instances of "chatterpb.EchoerStreamingRequest" from the "echoer"
// endpoint gRPC stream.
func (s *echoerServerStream) Recv() (string, error) {
	var res string
	v, err := s.stream.Recv()
	if err != nil {
		return res, err
	}
	res = NewEchoerStreamingRequest(v)
	return res, nil
}

func (s *echoerServerStream) Close() error {
	// nothing to do here
	return nil
}

// Recv reads instances of "chatterpb.ListenerStreamingRequest" from the
// "listener" endpoint gRPC stream.
func (s *listenerServerStream) Recv() (string, error) {
	var res string
	v, err := s.stream.Recv()
	if err != nil {
		return res, err
	}
	res = NewListenerStreamingRequest(v)
	return res, nil
}

func (s *listenerServerStream) Close() error {
	// nothing to do here
	return nil
}

// SendAndClose streams instances of "chattersvc.ChatSummaryCollection" to the
// "summary" endpoint gRPC stream.
func (s *summaryServerStream) SendAndClose(res chattersvc.ChatSummaryCollection) error {
	v := NewChatSummaryCollection(res)
	return s.stream.SendAndClose(v)
}

// Recv reads instances of "chatterpb.SummaryStreamingRequest" from the
// "summary" endpoint gRPC stream.
func (s *summaryServerStream) Recv() (string, error) {
	var res string
	v, err := s.stream.Recv()
	if err != nil {
		return res, err
	}
	res = NewSummaryStreamingRequest(v)
	return res, nil
}

// Send streams instances of "chattersvc.ChatSummary" to the "history" endpoint
// gRPC stream.
func (s *historyServerStream) Send(res *chattersvc.ChatSummary) error {
	v := NewHistoryResponse(res)
	return s.stream.Send(v)
}

func (s *historyServerStream) Close() error {
	// nothing to do here
	return nil
}

// SetView sets the view.
func (s *historyServerStream) SetView(view string) {
}
