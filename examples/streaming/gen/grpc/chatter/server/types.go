// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// chatter gRPC server types
//
// Command:
// $ goa gen goa.design/goa/examples/streaming/design -o
// $(GOPATH)/src/goa.design/goa/examples/streaming

package server

import (
	chattersvc "goa.design/goa/examples/streaming/gen/chatter"
	chattersvcviews "goa.design/goa/examples/streaming/gen/chatter/views"
	"goa.design/goa/examples/streaming/gen/grpc/chatter/pb"
)

// NewLoginPayload builds the payload of the "login" endpoint of the "chatter"
// service from the gRPC request type.
func NewLoginPayload(message *pb.LoginRequest, user string, password string) *chattersvc.LoginPayload {
	v := &chattersvc.LoginPayload{}
	v.User = user
	v.Password = password
	return v
}

// NewLoginResponse builds the gRPC response type from the result of the
// "login" endpoint of the "chatter" service.
func NewLoginResponse(res string) *pb.LoginResponse {
	v := &pb.LoginResponse{}
	v.Field = res
	return v
}

// NewEchoerPayload builds the payload of the "echoer" endpoint of the
// "chatter" service from the gRPC request type.
func NewEchoerPayload(token string) *chattersvc.EchoerPayload {
	v := &chattersvc.EchoerPayload{}
	v.Token = token
	return v
}

func NewEchoerResponse(res string) *pb.EchoerResponse {
	v := &pb.EchoerResponse{}
	v.Field = res
	return v
}

func NewEchoerStreamingRequest(v *pb.EchoerStreamingRequest) string {
	p := v.Field
	return p
}

// NewListenerPayload builds the payload of the "listener" endpoint of the
// "chatter" service from the gRPC request type.
func NewListenerPayload(token string) *chattersvc.ListenerPayload {
	v := &chattersvc.ListenerPayload{}
	v.Token = token
	return v
}

func NewListenerStreamingRequest(v *pb.ListenerStreamingRequest) string {
	p := v.Field
	return p
}

// NewSummaryPayload builds the payload of the "summary" endpoint of the
// "chatter" service from the gRPC request type.
func NewSummaryPayload(token string) *chattersvc.SummaryPayload {
	v := &chattersvc.SummaryPayload{}
	v.Token = token
	return v
}

func NewChatSummaryCollection(vres chattersvcviews.ChatSummaryCollectionView) *pb.ChatSummaryCollection {
	v := &pb.ChatSummaryCollection{}
	v.Field = make([]*pb.ChatSummary, len(vres))
	for i, val := range vres {
		v.Field[i] = &pb.ChatSummary{
			Message_: *val.Message,
		}
		if val.Length != nil {
			v.Field[i].Length = int32(*val.Length)
		}
		if val.SentAt != nil {
			v.Field[i].SentAt = *val.SentAt
		}
	}
	return v
}

func NewSummaryStreamingRequest(v *pb.SummaryStreamingRequest) string {
	p := v.Field
	return p
}

// NewHistoryPayload builds the payload of the "history" endpoint of the
// "chatter" service from the gRPC request type.
func NewHistoryPayload(message *pb.HistoryRequest, view string, token string) *chattersvc.HistoryPayload {
	v := &chattersvc.HistoryPayload{}
	v.View = &view
	v.Token = token
	return v
}

func NewHistoryResponse(vres *chattersvcviews.ChatSummaryView) *pb.HistoryResponse {
	v := &pb.HistoryResponse{
		Message_: *vres.Message,
	}
	if vres.Length != nil {
		v.Length = int32(*vres.Length)
	}
	if vres.SentAt != nil {
		v.SentAt = *vres.SentAt
	}
	return v
}
