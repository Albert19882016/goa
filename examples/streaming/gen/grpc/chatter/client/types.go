// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// chatter gRPC client types
//
// Command:
// $ goa gen goa.design/goa/examples/streaming/design -o
// $(GOPATH)/src/goa.design/goa/examples/streaming

package client

import (
	chattersvc "goa.design/goa/examples/streaming/gen/chatter"
	chatterpb "goa.design/goa/examples/streaming/gen/grpc/chatter"
)

// NewLoginRequest builds the gRPC request type from the payload of the "login"
// endpoint of the "chatter" service.
func NewLoginRequest(p *chattersvc.LoginPayload) *chatterpb.LoginRequest {
	v := &chatterpb.LoginRequest{}
	return v
}

// NewLoginResponse builds the result type of the "login" endpoint of the
// "chatter" service from the gRPC response type.
func NewLoginResponse(resp *chatterpb.LoginResponse) string {
	v := resp.Field
	return v
}

func NewEchoerResponse(v *chatterpb.EchoerResponse) string {
	res := v.Field
	return res
}

func NewEchoerStreamingRequest(res string) *chatterpb.EchoerStreamingRequest {
	v := &chatterpb.EchoerStreamingRequest{}
	v.Field = res
	return v
}

func NewListenerStreamingRequest(res string) *chatterpb.ListenerStreamingRequest {
	v := &chatterpb.ListenerStreamingRequest{}
	v.Field = res
	return v
}

func NewChatSummaryCollection(v *chatterpb.ChatSummaryCollection) chattersvc.ChatSummaryCollection {
	res := make([]*chattersvc.ChatSummary, len(v.Field))
	for i, val := range v.Field {
		res[i] = &chattersvc.ChatSummary{
			Message: val.Message_,
			SentAt:  &val.SentAt,
		}
		lengthptr := int(val.Length)
		res[i].Length = &lengthptr
	}
	return res
}

func NewSummaryStreamingRequest(res string) *chatterpb.SummaryStreamingRequest {
	v := &chatterpb.SummaryStreamingRequest{}
	v.Field = res
	return v
}

// NewHistoryRequest builds the gRPC request type from the payload of the
// "history" endpoint of the "chatter" service.
func NewHistoryRequest(p *chattersvc.HistoryPayload) *chatterpb.HistoryRequest {
	v := &chatterpb.HistoryRequest{}
	return v
}

func NewChatSummary(v *chatterpb.HistoryResponse) *chattersvc.ChatSummary {
	res := &chattersvc.ChatSummary{
		Message: v.Message_,
		SentAt:  &v.SentAt,
	}
	lengthptr := int(v.Length)
	res.Length = &lengthptr
	return res
}
