// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// chatter gRPC client encoders and decoders
//
// Command:
// $ goa gen goa.design/goa/examples/streaming/design -o
// $(GOPATH)/src/goa.design/goa/examples/streaming

package client

import (
	"context"

	chattersvc "goa.design/goa/examples/streaming/gen/chatter"
	chatterpb "goa.design/goa/examples/streaming/gen/grpc/chatter"
	"google.golang.org/grpc/metadata"
)

// EncodeLoginRequest encodes requests sent to chatter login endpoint.
func EncodeLoginRequest(ctx context.Context, p *chattersvc.LoginPayload) (context.Context, *chatterpb.LoginRequest) {
	req := NewLoginRequest(p)
	ctx = metadata.AppendToOutgoingContext(ctx, "user", p.User)
	ctx = metadata.AppendToOutgoingContext(ctx, "password", p.Password)
	return ctx, req
}

// DecodeLoginResponse decodes responses from the chatter login endpoint.
func DecodeLoginResponse(ctx context.Context, resp *chatterpb.LoginResponse) (string, error) {
	res := NewLoginResponse(resp)
	return res, nil
}

// EncodeEchoerRequest encodes requests sent to chatter echoer endpoint.
func EncodeEchoerRequest(ctx context.Context, p *chattersvc.EchoerPayload) context.Context {
	ctx = metadata.AppendToOutgoingContext(ctx, "authorization", p.Token)
	return ctx
}

// EncodeListenerRequest encodes requests sent to chatter listener endpoint.
func EncodeListenerRequest(ctx context.Context, p *chattersvc.ListenerPayload) context.Context {
	ctx = metadata.AppendToOutgoingContext(ctx, "authorization", p.Token)
	return ctx
}

// EncodeSummaryRequest encodes requests sent to chatter summary endpoint.
func EncodeSummaryRequest(ctx context.Context, p *chattersvc.SummaryPayload) context.Context {
	ctx = metadata.AppendToOutgoingContext(ctx, "authorization", p.Token)
	return ctx
}

// EncodeHistoryRequest encodes requests sent to chatter history endpoint.
func EncodeHistoryRequest(ctx context.Context, p *chattersvc.HistoryPayload) (context.Context, *chatterpb.HistoryRequest) {
	req := NewHistoryRequest(p)
	if p.View != nil {
		ctx = metadata.AppendToOutgoingContext(ctx, "view", *p.View)
	}
	ctx = metadata.AppendToOutgoingContext(ctx, "authorization", p.Token)
	return ctx, req
}
