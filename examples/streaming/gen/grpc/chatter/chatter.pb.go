// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chatter.proto

/*
Package chatter is a generated protocol buffer package.

It is generated from these files:
	chatter.proto

It has these top-level messages:
	LoginRequest
	LoginResponse
	EchoerStreamingRequest
	EchoerResponse
	ListenerStreamingRequest
	ListenerResponse
	SummaryStreamingRequest
	ChatSummaryCollection
	ChatSummary
	HistoryRequest
	HistoryResponse
*/
package chatter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LoginRequest struct {
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LoginResponse struct {
	Field string `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoginResponse) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

type EchoerStreamingRequest struct {
	Field string `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
}

func (m *EchoerStreamingRequest) Reset()                    { *m = EchoerStreamingRequest{} }
func (m *EchoerStreamingRequest) String() string            { return proto.CompactTextString(m) }
func (*EchoerStreamingRequest) ProtoMessage()               {}
func (*EchoerStreamingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EchoerStreamingRequest) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

type EchoerResponse struct {
	Field string `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
}

func (m *EchoerResponse) Reset()                    { *m = EchoerResponse{} }
func (m *EchoerResponse) String() string            { return proto.CompactTextString(m) }
func (*EchoerResponse) ProtoMessage()               {}
func (*EchoerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EchoerResponse) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

type ListenerStreamingRequest struct {
	Field string `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
}

func (m *ListenerStreamingRequest) Reset()                    { *m = ListenerStreamingRequest{} }
func (m *ListenerStreamingRequest) String() string            { return proto.CompactTextString(m) }
func (*ListenerStreamingRequest) ProtoMessage()               {}
func (*ListenerStreamingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListenerStreamingRequest) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

type ListenerResponse struct {
}

func (m *ListenerResponse) Reset()                    { *m = ListenerResponse{} }
func (m *ListenerResponse) String() string            { return proto.CompactTextString(m) }
func (*ListenerResponse) ProtoMessage()               {}
func (*ListenerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type SummaryStreamingRequest struct {
	Field string `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
}

func (m *SummaryStreamingRequest) Reset()                    { *m = SummaryStreamingRequest{} }
func (m *SummaryStreamingRequest) String() string            { return proto.CompactTextString(m) }
func (*SummaryStreamingRequest) ProtoMessage()               {}
func (*SummaryStreamingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SummaryStreamingRequest) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

type ChatSummaryCollection struct {
	Field []*ChatSummary `protobuf:"bytes,1,rep,name=field" json:"field,omitempty"`
}

func (m *ChatSummaryCollection) Reset()                    { *m = ChatSummaryCollection{} }
func (m *ChatSummaryCollection) String() string            { return proto.CompactTextString(m) }
func (*ChatSummaryCollection) ProtoMessage()               {}
func (*ChatSummaryCollection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ChatSummaryCollection) GetField() []*ChatSummary {
	if m != nil {
		return m.Field
	}
	return nil
}

type ChatSummary struct {
	// Message sent to the server
	Message_ string `protobuf:"bytes,1,opt,name=message_,json=message" json:"message_,omitempty"`
	// Length of the message sent
	Length int32 `protobuf:"zigzag32,2,opt,name=length" json:"length,omitempty"`
	// Time at which the message was sent
	SentAt string `protobuf:"bytes,3,opt,name=sent_at,json=sentAt" json:"sent_at,omitempty"`
}

func (m *ChatSummary) Reset()                    { *m = ChatSummary{} }
func (m *ChatSummary) String() string            { return proto.CompactTextString(m) }
func (*ChatSummary) ProtoMessage()               {}
func (*ChatSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ChatSummary) GetMessage_() string {
	if m != nil {
		return m.Message_
	}
	return ""
}

func (m *ChatSummary) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *ChatSummary) GetSentAt() string {
	if m != nil {
		return m.SentAt
	}
	return ""
}

type HistoryRequest struct {
}

func (m *HistoryRequest) Reset()                    { *m = HistoryRequest{} }
func (m *HistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*HistoryRequest) ProtoMessage()               {}
func (*HistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type HistoryResponse struct {
	// Message sent to the server
	Message_ string `protobuf:"bytes,1,opt,name=message_,json=message" json:"message_,omitempty"`
	// Length of the message sent
	Length int32 `protobuf:"zigzag32,2,opt,name=length" json:"length,omitempty"`
	// Time at which the message was sent
	SentAt string `protobuf:"bytes,3,opt,name=sent_at,json=sentAt" json:"sent_at,omitempty"`
}

func (m *HistoryResponse) Reset()                    { *m = HistoryResponse{} }
func (m *HistoryResponse) String() string            { return proto.CompactTextString(m) }
func (*HistoryResponse) ProtoMessage()               {}
func (*HistoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *HistoryResponse) GetMessage_() string {
	if m != nil {
		return m.Message_
	}
	return ""
}

func (m *HistoryResponse) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *HistoryResponse) GetSentAt() string {
	if m != nil {
		return m.SentAt
	}
	return ""
}

func init() {
	proto.RegisterType((*LoginRequest)(nil), "chatter.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "chatter.LoginResponse")
	proto.RegisterType((*EchoerStreamingRequest)(nil), "chatter.EchoerStreamingRequest")
	proto.RegisterType((*EchoerResponse)(nil), "chatter.EchoerResponse")
	proto.RegisterType((*ListenerStreamingRequest)(nil), "chatter.ListenerStreamingRequest")
	proto.RegisterType((*ListenerResponse)(nil), "chatter.ListenerResponse")
	proto.RegisterType((*SummaryStreamingRequest)(nil), "chatter.SummaryStreamingRequest")
	proto.RegisterType((*ChatSummaryCollection)(nil), "chatter.ChatSummaryCollection")
	proto.RegisterType((*ChatSummary)(nil), "chatter.ChatSummary")
	proto.RegisterType((*HistoryRequest)(nil), "chatter.HistoryRequest")
	proto.RegisterType((*HistoryResponse)(nil), "chatter.HistoryResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Chatter service

type ChatterClient interface {
	// Creates a valid JWT token for auth to chat.
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Echoes the message sent by the client.
	Echoer(ctx context.Context, opts ...grpc.CallOption) (Chatter_EchoerClient, error)
	// Listens to the messages sent by the client.
	Listener(ctx context.Context, opts ...grpc.CallOption) (Chatter_ListenerClient, error)
	// Summarizes the chat messages sent by the client.
	Summary(ctx context.Context, opts ...grpc.CallOption) (Chatter_SummaryClient, error)
	// Returns the chat messages sent to the server.
	History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (Chatter_HistoryClient, error)
}

type chatterClient struct {
	cc *grpc.ClientConn
}

func NewChatterClient(cc *grpc.ClientConn) ChatterClient {
	return &chatterClient{cc}
}

func (c *chatterClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/chatter.chatter/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatterClient) Echoer(ctx context.Context, opts ...grpc.CallOption) (Chatter_EchoerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Chatter_serviceDesc.Streams[0], c.cc, "/chatter.chatter/Echoer", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatterEchoerClient{stream}
	return x, nil
}

type Chatter_EchoerClient interface {
	Send(*EchoerStreamingRequest) error
	Recv() (*EchoerResponse, error)
	grpc.ClientStream
}

type chatterEchoerClient struct {
	grpc.ClientStream
}

func (x *chatterEchoerClient) Send(m *EchoerStreamingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatterEchoerClient) Recv() (*EchoerResponse, error) {
	m := new(EchoerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatterClient) Listener(ctx context.Context, opts ...grpc.CallOption) (Chatter_ListenerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Chatter_serviceDesc.Streams[1], c.cc, "/chatter.chatter/Listener", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatterListenerClient{stream}
	return x, nil
}

type Chatter_ListenerClient interface {
	Send(*ListenerStreamingRequest) error
	CloseAndRecv() (*ListenerResponse, error)
	grpc.ClientStream
}

type chatterListenerClient struct {
	grpc.ClientStream
}

func (x *chatterListenerClient) Send(m *ListenerStreamingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatterListenerClient) CloseAndRecv() (*ListenerResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ListenerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatterClient) Summary(ctx context.Context, opts ...grpc.CallOption) (Chatter_SummaryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Chatter_serviceDesc.Streams[2], c.cc, "/chatter.chatter/Summary", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatterSummaryClient{stream}
	return x, nil
}

type Chatter_SummaryClient interface {
	Send(*SummaryStreamingRequest) error
	CloseAndRecv() (*ChatSummaryCollection, error)
	grpc.ClientStream
}

type chatterSummaryClient struct {
	grpc.ClientStream
}

func (x *chatterSummaryClient) Send(m *SummaryStreamingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatterSummaryClient) CloseAndRecv() (*ChatSummaryCollection, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ChatSummaryCollection)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatterClient) History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (Chatter_HistoryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Chatter_serviceDesc.Streams[3], c.cc, "/chatter.chatter/History", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatterHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chatter_HistoryClient interface {
	Recv() (*HistoryResponse, error)
	grpc.ClientStream
}

type chatterHistoryClient struct {
	grpc.ClientStream
}

func (x *chatterHistoryClient) Recv() (*HistoryResponse, error) {
	m := new(HistoryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Chatter service

type ChatterServer interface {
	// Creates a valid JWT token for auth to chat.
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Echoes the message sent by the client.
	Echoer(Chatter_EchoerServer) error
	// Listens to the messages sent by the client.
	Listener(Chatter_ListenerServer) error
	// Summarizes the chat messages sent by the client.
	Summary(Chatter_SummaryServer) error
	// Returns the chat messages sent to the server.
	History(*HistoryRequest, Chatter_HistoryServer) error
}

func RegisterChatterServer(s *grpc.Server, srv ChatterServer) {
	s.RegisterService(&_Chatter_serviceDesc, srv)
}

func _Chatter_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatterServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatter.chatter/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatterServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chatter_Echoer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatterServer).Echoer(&chatterEchoerServer{stream})
}

type Chatter_EchoerServer interface {
	Send(*EchoerResponse) error
	Recv() (*EchoerStreamingRequest, error)
	grpc.ServerStream
}

type chatterEchoerServer struct {
	grpc.ServerStream
}

func (x *chatterEchoerServer) Send(m *EchoerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatterEchoerServer) Recv() (*EchoerStreamingRequest, error) {
	m := new(EchoerStreamingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Chatter_Listener_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatterServer).Listener(&chatterListenerServer{stream})
}

type Chatter_ListenerServer interface {
	SendAndClose(*ListenerResponse) error
	Recv() (*ListenerStreamingRequest, error)
	grpc.ServerStream
}

type chatterListenerServer struct {
	grpc.ServerStream
}

func (x *chatterListenerServer) SendAndClose(m *ListenerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatterListenerServer) Recv() (*ListenerStreamingRequest, error) {
	m := new(ListenerStreamingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Chatter_Summary_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatterServer).Summary(&chatterSummaryServer{stream})
}

type Chatter_SummaryServer interface {
	SendAndClose(*ChatSummaryCollection) error
	Recv() (*SummaryStreamingRequest, error)
	grpc.ServerStream
}

type chatterSummaryServer struct {
	grpc.ServerStream
}

func (x *chatterSummaryServer) SendAndClose(m *ChatSummaryCollection) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatterSummaryServer) Recv() (*SummaryStreamingRequest, error) {
	m := new(SummaryStreamingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Chatter_History_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatterServer).History(m, &chatterHistoryServer{stream})
}

type Chatter_HistoryServer interface {
	Send(*HistoryResponse) error
	grpc.ServerStream
}

type chatterHistoryServer struct {
	grpc.ServerStream
}

func (x *chatterHistoryServer) Send(m *HistoryResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Chatter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chatter.chatter",
	HandlerType: (*ChatterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Chatter_Login_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Echoer",
			Handler:       _Chatter_Echoer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Listener",
			Handler:       _Chatter_Listener_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Summary",
			Handler:       _Chatter_Summary_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "History",
			Handler:       _Chatter_History_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chatter.proto",
}

func init() { proto.RegisterFile("chatter.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x4d, 0x4f, 0xea, 0x40,
	0x14, 0xcd, 0x40, 0x68, 0x79, 0x97, 0x07, 0x8f, 0x77, 0xc3, 0x47, 0xe9, 0x42, 0xb1, 0x89, 0xa6,
	0x71, 0x81, 0x04, 0x13, 0x97, 0x26, 0x86, 0x68, 0x8c, 0xc1, 0x0d, 0xac, 0x5c, 0x18, 0x52, 0x71,
	0x6c, 0x9b, 0xb4, 0x33, 0xd8, 0x19, 0x16, 0xfc, 0x5f, 0x7f, 0x88, 0x91, 0xce, 0xb4, 0xc8, 0x47,
	0x64, 0xe1, 0xf2, 0xdc, 0x9e, 0x7b, 0xee, 0xdc, 0x7b, 0x4e, 0xa1, 0x3a, 0x0b, 0x3c, 0x29, 0x69,
	0xd2, 0x9b, 0x27, 0x5c, 0x72, 0x34, 0x15, 0x74, 0x6a, 0xf0, 0x77, 0xc4, 0xfd, 0x90, 0x8d, 0xe9,
	0xfb, 0x82, 0x0a, 0xe9, 0x9c, 0x42, 0x55, 0x61, 0x31, 0xe7, 0x4c, 0x50, 0x6c, 0x40, 0xe9, 0x2d,
	0xa4, 0xd1, 0xab, 0x45, 0xba, 0xc4, 0xfd, 0x33, 0x4e, 0x81, 0xd3, 0x83, 0xd6, 0xed, 0x2c, 0xe0,
	0x34, 0x99, 0xc8, 0x84, 0x7a, 0x71, 0xc8, 0x7c, 0x25, 0xb0, 0x87, 0x7f, 0x06, 0xb5, 0x94, 0xff,
	0x83, 0x6e, 0x1f, 0xac, 0x51, 0x28, 0x24, 0x65, 0x07, 0x2b, 0x23, 0xd4, 0x75, 0x87, 0xd6, 0x76,
	0x2e, 0xa0, 0x3d, 0x59, 0xc4, 0xb1, 0x97, 0x2c, 0x0f, 0x14, 0x19, 0x42, 0x73, 0x18, 0x78, 0x52,
	0x35, 0x0d, 0x79, 0x14, 0xd1, 0x99, 0x0c, 0x39, 0xc3, 0xf3, 0x9c, 0x5e, 0x74, 0x2b, 0x83, 0x46,
	0x4f, 0x9f, 0x71, 0x8d, 0xae, 0x45, 0x9e, 0xa0, 0xb2, 0x56, 0xc5, 0x0e, 0x94, 0x63, 0x2a, 0x84,
	0xe7, 0xd3, 0xa9, 0x1a, 0x66, 0x2a, 0x8c, 0x2d, 0x30, 0x22, 0xca, 0x7c, 0x19, 0x58, 0x85, 0x2e,
	0x71, 0xff, 0x8f, 0x15, 0xc2, 0x36, 0x98, 0x82, 0x32, 0x39, 0xf5, 0xa4, 0x55, 0x5c, 0x75, 0x18,
	0x5f, 0xf0, 0x46, 0x3a, 0x75, 0xa8, 0xdd, 0x87, 0x42, 0xf2, 0x64, 0xa9, 0x7d, 0x7a, 0x86, 0x7f,
	0x59, 0x45, 0x5d, 0xf4, 0x17, 0x07, 0x0e, 0x3e, 0x0a, 0xa0, 0x23, 0x82, 0x57, 0x50, 0x5a, 0x45,
	0x02, 0x9b, 0xd9, 0xf6, 0xeb, 0x91, 0xb1, 0x5b, 0x9b, 0x65, 0xf5, 0x9e, 0x3b, 0x30, 0x52, 0xcf,
	0xf1, 0x38, 0x63, 0xec, 0x0e, 0x8d, 0xdd, 0xde, 0x20, 0x68, 0x0d, 0x97, 0xf4, 0x09, 0x3e, 0x40,
	0x59, 0x3b, 0x8c, 0x27, 0xf9, 0xac, 0x3d, 0x31, 0xb1, 0x3b, 0x5b, 0x94, 0x5c, 0x0d, 0x1f, 0xc1,
	0xd4, 0xfe, 0x74, 0x33, 0xde, 0x9e, 0xac, 0xd8, 0x47, 0xbb, 0xdc, 0xce, 0xc3, 0xe1, 0x12, 0xbc,
	0x06, 0x53, 0xb9, 0x80, 0xf9, 0x0a, 0xdf, 0x9d, 0xb2, 0xad, 0xed, 0x0f, 0xe9, 0x73, 0xfa, 0xe4,
	0xc5, 0x58, 0xfd, 0x8d, 0x97, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x40, 0x41, 0x4c, 0x0f, 0x9e,
	0x03, 0x00, 0x00,
}
