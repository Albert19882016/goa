// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// secured_service gRPC client encoders and decoders
//
// Command:
// $ goa gen goa.design/goa/examples/security/design -o
// $(GOPATH)/src/goa.design/goa/examples/security

package client

import (
	"context"

	secured_servicepb "goa.design/goa/examples/security/gen/grpc/secured_service"
	securedservice "goa.design/goa/examples/security/gen/secured_service"
	"google.golang.org/grpc/metadata"
)

// EncodeSigninRequest encodes requests sent to secured_service signin endpoint.
func EncodeSigninRequest(ctx context.Context, p *securedservice.SigninPayload) (context.Context, *secured_servicepb.SigninRequest) {
	req := NewSigninRequest(p)
	ctx = metadata.AppendToOutgoingContext(ctx, "username", p.Username)
	ctx = metadata.AppendToOutgoingContext(ctx, "password", p.Password)
	return ctx, req
}

// DecodeSigninResponse decodes responses from the secured_service signin
// endpoint.
func DecodeSigninResponse(ctx context.Context, resp *secured_servicepb.SigninResponse) (*securedservice.Creds, error) {
	res := NewCreds(resp)
	return res, nil
}

// EncodeSecureRequest encodes requests sent to secured_service secure endpoint.
func EncodeSecureRequest(ctx context.Context, p *securedservice.SecurePayload) (context.Context, *secured_servicepb.SecureRequest) {
	req := NewSecureRequest(p)
	ctx = metadata.AppendToOutgoingContext(ctx, "authorization", p.Token)
	return ctx, req
}

// DecodeSecureResponse decodes responses from the secured_service secure
// endpoint.
func DecodeSecureResponse(ctx context.Context, resp *secured_servicepb.SecureResponse) (string, error) {
	res := NewSecureResponse(resp)
	return res, nil
}

// EncodeDoublySecureRequest encodes requests sent to secured_service
// doubly_secure endpoint.
func EncodeDoublySecureRequest(ctx context.Context, p *securedservice.DoublySecurePayload) (context.Context, *secured_servicepb.DoublySecureRequest) {
	req := NewDoublySecureRequest(p)
	ctx = metadata.AppendToOutgoingContext(ctx, "authorization", p.Token)
	return ctx, req
}

// DecodeDoublySecureResponse decodes responses from the secured_service
// doubly_secure endpoint.
func DecodeDoublySecureResponse(ctx context.Context, resp *secured_servicepb.DoublySecureResponse) (string, error) {
	res := NewDoublySecureResponse(resp)
	return res, nil
}

// EncodeAlsoDoublySecureRequest encodes requests sent to secured_service
// also_doubly_secure endpoint.
func EncodeAlsoDoublySecureRequest(ctx context.Context, p *securedservice.AlsoDoublySecurePayload) (context.Context, *secured_servicepb.AlsoDoublySecureRequest) {
	req := NewAlsoDoublySecureRequest(p)
	if p.OauthToken != nil {
		ctx = metadata.AppendToOutgoingContext(ctx, "oauth", *p.OauthToken)
	}
	if p.Token != nil {
		ctx = metadata.AppendToOutgoingContext(ctx, "authorization", *p.Token)
	}
	return ctx, req
}

// DecodeAlsoDoublySecureResponse decodes responses from the secured_service
// also_doubly_secure endpoint.
func DecodeAlsoDoublySecureResponse(ctx context.Context, resp *secured_servicepb.AlsoDoublySecureResponse) (string, error) {
	res := NewAlsoDoublySecureResponse(resp)
	return res, nil
}
