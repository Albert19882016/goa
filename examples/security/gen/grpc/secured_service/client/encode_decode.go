// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// secured_service gRPC client encoders and decoders
//
// Command:
// $ goa gen goa.design/goa/examples/security/design -o
// $(GOPATH)/src/goa.design/goa/examples/security

package client

import (
	"context"

	secured_servicepb "goa.design/goa/examples/security/gen/grpc/secured_service"
	securedservice "goa.design/goa/examples/security/gen/secured_service"
	goagrpc "goa.design/goa/grpc"
)

// EncodeSigninRequest encodes requests sent to secured_service signin endpoint.
func EncodeSigninRequest(ctx context.Context, v interface{}) (interface{}, error) {
	p, ok := v.(*securedservice.SigninPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("secured_service", "signin", "*securedservice.SigninPayload", v)
	}
	return NewSigninRequest(p), nil
}

// DecodeSigninResponse decodes responses from the secured_service signin
// endpoint.
func DecodeSigninResponse(ctx context.Context, v interface{}) (interface{}, error) {
	resp, ok := v.(*secured_servicepb.SigninResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("secured_service", "signin", "*secured_servicepb.SigninResponse", v)
	}
	res := NewCreds(resp)
	return res, nil
}

// EncodeSecureRequest encodes requests sent to secured_service secure endpoint.
func EncodeSecureRequest(ctx context.Context, v interface{}) (interface{}, error) {
	p, ok := v.(*securedservice.SecurePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("secured_service", "secure", "*securedservice.SecurePayload", v)
	}
	return NewSecureRequest(p), nil
}

// DecodeSecureResponse decodes responses from the secured_service secure
// endpoint.
func DecodeSecureResponse(ctx context.Context, v interface{}) (interface{}, error) {
	resp, ok := v.(*secured_servicepb.SecureResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("secured_service", "secure", "*secured_servicepb.SecureResponse", v)
	}
	res := NewSecureResponse(resp)
	return res, nil
}

// EncodeDoublySecureRequest encodes requests sent to secured_service
// doubly_secure endpoint.
func EncodeDoublySecureRequest(ctx context.Context, v interface{}) (interface{}, error) {
	p, ok := v.(*securedservice.DoublySecurePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("secured_service", "doubly_secure", "*securedservice.DoublySecurePayload", v)
	}
	return NewDoublySecureRequest(p), nil
}

// DecodeDoublySecureResponse decodes responses from the secured_service
// doubly_secure endpoint.
func DecodeDoublySecureResponse(ctx context.Context, v interface{}) (interface{}, error) {
	resp, ok := v.(*secured_servicepb.DoublySecureResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("secured_service", "doubly_secure", "*secured_servicepb.DoublySecureResponse", v)
	}
	res := NewDoublySecureResponse(resp)
	return res, nil
}

// EncodeAlsoDoublySecureRequest encodes requests sent to secured_service
// also_doubly_secure endpoint.
func EncodeAlsoDoublySecureRequest(ctx context.Context, v interface{}) (interface{}, error) {
	p, ok := v.(*securedservice.AlsoDoublySecurePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("secured_service", "also_doubly_secure", "*securedservice.AlsoDoublySecurePayload", v)
	}
	return NewAlsoDoublySecureRequest(p), nil
}

// DecodeAlsoDoublySecureResponse decodes responses from the secured_service
// also_doubly_secure endpoint.
func DecodeAlsoDoublySecureResponse(ctx context.Context, v interface{}) (interface{}, error) {
	resp, ok := v.(*secured_servicepb.AlsoDoublySecureResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("secured_service", "also_doubly_secure", "*secured_servicepb.AlsoDoublySecureResponse", v)
	}
	res := NewAlsoDoublySecureResponse(resp)
	return res, nil
}
