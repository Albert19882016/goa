swagger: "2.0"
info:
  title: Security Example API
  description: This API demonstrates the use of the goa security DSL
  version: ""
host: localhost:80
paths:
  /secure:
    get:
      tags:
      - secured_service
      summary: secure secured_service
      description: |-
        This action is secured with the jwt scheme

        Required security scopes:
          * `api:read`
      operationId: secured_service#secure
      parameters:
      - name: fail
        in: query
        description: Whether to force auth failure even with a valid JWT
        required: false
        type: boolean
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: true
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            type: string
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/secure_unauthorizedResponseBody'
        "403":
          description: Forbidden response.
          schema:
            $ref: '#/definitions/secure_invalid-scopesResponseBody'
      schemes:
      - grpc
      - http
      security:
      - jwt: []
    put:
      tags:
      - secured_service
      summary: doubly_secure secured_service
      description: |-
        This action is secured with the jwt scheme and also requires an API key query string.

        Required security scopes:
          * `api:read`
          * `api:write`
      operationId: secured_service#doubly_secure
      parameters:
      - name: k
        in: query
        description: API key
        required: true
        type: string
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: true
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            type: string
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/doubly_secure_unauthorizedResponseBody'
        "403":
          description: Forbidden response.
          schema:
            $ref: '#/definitions/doubly_secure_invalid-scopesResponseBody'
      schemes:
      - grpc
      - http
      security:
      - api_key: []
        jwt: []
    post:
      tags:
      - secured_service
      summary: also_doubly_secure secured_service
      description: |-
        This action is secured with the jwt scheme and an API key header or username/password and OAuth2 token.

        Required security scopes:
          * `api:read`
          * `api:write`
      operationId: secured_service#also_doubly_secure
      parameters:
      - name: k
        in: query
        description: API key
        required: false
        type: string
      - name: oauth
        in: query
        required: false
        type: string
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            type: string
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/also_doubly_secure_unauthorizedResponseBody'
        "403":
          description: Forbidden response.
          schema:
            $ref: '#/definitions/also_doubly_secure_invalid-scopesResponseBody'
      schemes:
      - grpc
      - http
      security:
      - api_key: []
        jwt: []
      - basic: []
        oauth2:
        - api:read
        - api:write
  /signin:
    post:
      tags:
      - secured_service
      summary: signin secured_service
      description: Creates a valid JWT after authenticating using basic_auth scheme.
      operationId: secured_service#signin
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/signinResponseBody'
            required:
            - jwt
            - api_key
            - oauth_token
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/signin_unauthorizedResponseBody'
      schemes:
      - grpc
      - http
      security:
      - basic: []
definitions:
  also_doubly_secure_invalid-scopesResponseBody:
    title: also_doubly_secure_invalid-scopesResponseBody
    type: string
    description: Token scopes are invalid
    example: Aliquam voluptatum vero quia.
  also_doubly_secure_unauthorizedResponseBody:
    title: also_doubly_secure_unauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Mollitia fuga qui.
  doubly_secure_invalid-scopesResponseBody:
    title: doubly_secure_invalid-scopesResponseBody
    type: string
    description: Token scopes are invalid
    example: Qui qui facilis quis minus repudiandae.
  doubly_secure_unauthorizedResponseBody:
    title: doubly_secure_unauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Suscipit voluptate est unde.
  secure_invalid-scopesResponseBody:
    title: secure_invalid-scopesResponseBody
    type: string
    description: Token scopes are invalid
    example: Iste sint minima veniam.
  secure_unauthorizedResponseBody:
    title: secure_unauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Itaque consequatur.
  signin_unauthorizedResponseBody:
    title: signin_unauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Commodi quos ut qui possimus.
  signinResponseBody:
    title: signinResponseBody
    type: object
    properties:
      api_key:
        type: string
        description: API Key
        example: abcdef12345
      jwt:
        type: string
        description: JWT token
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      oauth_token:
        type: string
        description: OAuth2 token
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
    example:
      api_key: abcdef12345
      jwt: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      oauth_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
    required:
    - jwt
    - api_key
    - oauth_token
securityDefinitions:
  api_key:
    type: apiKey
    description: Secures endpoint by requiring an API key.
  basic:
    type: basic
    description: Basic authentication used to authenticate security principal during
      signin
  jwt:
    type: apiKey
    description: |-
      Secures endpoint by requiring a valid JWT token retrieved via the signin endpoint. Supports scopes "api:read" and "api:write".
      **Security Scopes**:
        * `api:read`: Read-only access
        * `api:write`: Read and write access
    name: Authorization
    in: header
  oauth2:
    type: oauth2
    description: Secures endpoint by requiring a valid OAuth2 token retrieved via
      the signin endpoint. Supports scopes "api:read" and "api:write".
    flow: accessCode
    authorizationUrl: /authorization
    tokenUrl: /token
    scopes:
      api:read: Read-only access
      api:write: Read and write access
externalDocs:
  description: Security example README
  url: https://github.com/goadesign/goa/tree/master/example/security/README.md
