// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// divider HTTP server types
//
// Command:
// $ goa gen goa.design/goa/examples/error/design -o
// $(GOPATH)/src/goa.design/goa/examples/error

package server

import (
	goa "goa.design/goa"
	dividersvc "goa.design/goa/examples/error/gen/divider"
)

// IntegerDividehasRemainderResponseBody is the type of the "divider" service
// "integer_divide" endpoint HTTP response body for the "has_remainder" error.
type IntegerDividehasRemainderResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IntegerDividedivByZeroResponseBody is the type of the "divider" service
// "integer_divide" endpoint HTTP response body for the "div_by_zero" error.
type IntegerDividedivByZeroResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IntegerDividetimeoutResponseBody is the type of the "divider" service
// "integer_divide" endpoint HTTP response body for the "timeout" error.
type IntegerDividetimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DividedivByZeroResponseBody is the type of the "divider" service "divide"
// endpoint HTTP response body for the "div_by_zero" error.
type DividedivByZeroResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DividetimeoutResponseBody is the type of the "divider" service "divide"
// endpoint HTTP response body for the "timeout" error.
type DividetimeoutResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewIntegerDividehasRemainderResponseBody builds the HTTP response body from
// the result of the "integer_divide" endpoint of the "divider" service.
func NewIntegerDividehasRemainderResponseBody(res *goa.ServiceError) *IntegerDividehasRemainderResponseBody {
	body := &IntegerDividehasRemainderResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIntegerDividedivByZeroResponseBody builds the HTTP response body from the
// result of the "integer_divide" endpoint of the "divider" service.
func NewIntegerDividedivByZeroResponseBody(res *goa.ServiceError) *IntegerDividedivByZeroResponseBody {
	body := &IntegerDividedivByZeroResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIntegerDividetimeoutResponseBody builds the HTTP response body from the
// result of the "integer_divide" endpoint of the "divider" service.
func NewIntegerDividetimeoutResponseBody(res *goa.ServiceError) *IntegerDividetimeoutResponseBody {
	body := &IntegerDividetimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDividedivByZeroResponseBody builds the HTTP response body from the result
// of the "divide" endpoint of the "divider" service.
func NewDividedivByZeroResponseBody(res *goa.ServiceError) *DividedivByZeroResponseBody {
	body := &DividedivByZeroResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDividetimeoutResponseBody builds the HTTP response body from the result
// of the "divide" endpoint of the "divider" service.
func NewDividetimeoutResponseBody(res *goa.ServiceError) *DividetimeoutResponseBody {
	body := &DividetimeoutResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIntegerDivideIntOperands builds a divider service integer_divide endpoint
// payload.
func NewIntegerDivideIntOperands(a int, b int) *dividersvc.IntOperands {
	return &dividersvc.IntOperands{
		A: a,
		B: b,
	}
}

// NewDivideFloatOperands builds a divider service divide endpoint payload.
func NewDivideFloatOperands(a float64, b float64) *dividersvc.FloatOperands {
	return &dividersvc.FloatOperands{
		A: a,
		B: b,
	}
}
