// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// divider GRPC client
//
// Command:
// $ goa gen goa.design/goa/examples/error/design -o
// $(GOPATH)/src/goa.design/goa/examples/error

package client

import (
	"context"

	goa "goa.design/goa"
	dividersvc "goa.design/goa/examples/error/gen/divider"
	dividerpb "goa.design/goa/examples/error/gen/grpc/divider"
	goagrpc "goa.design/goa/grpc"
	"google.golang.org/grpc"
)

// Client lists the service endpoint gRPC clients.
type Client struct {
	grpccli dividerpb.DividerClient
	opts    []grpc.CallOption
}

// NewClient instantiates gRPC client for all the divider service servers.
func NewClient(cc *grpc.ClientConn, opts ...grpc.CallOption) *Client {
	return &Client{
		grpccli: dividerpb.NewDividerClient(cc),
		opts:    opts,
	}
}

// IntegerDivide calls the "IntegerDivide" function in dividerpb.DividerClient
// interface.
func (c *Client) IntegerDivide() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		p, ok := v.(*dividersvc.IntOperands)
		if !ok {
			return nil, goagrpc.ErrInvalidType("divider", "integer_divide", "*dividersvc.IntOperands", v)
		}
		ctx, req := EncodeIntegerDivideRequest(ctx, p)
		resp, err := c.grpccli.IntegerDivide(ctx, req, c.opts...)
		if err != nil {
			return nil, err
		}
		return DecodeIntegerDivideResponse(ctx, resp)
	}
}

// Divide calls the "Divide" function in dividerpb.DividerClient interface.
func (c *Client) Divide() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		p, ok := v.(*dividersvc.FloatOperands)
		if !ok {
			return nil, goagrpc.ErrInvalidType("divider", "divide", "*dividersvc.FloatOperands", v)
		}
		ctx, req := EncodeDivideRequest(ctx, p)
		resp, err := c.grpccli.Divide(ctx, req, c.opts...)
		if err != nil {
			return nil, err
		}
		return DecodeDivideResponse(ctx, resp)
	}
}
