// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// divider gRPC client CLI support package
//
// Command:
// $ goa gen goa.design/goa/examples/error/design -o
// $(GOPATH)/src/goa.design/goa/examples/error

package client

import (
	"encoding/json"
	"fmt"

	dividersvc "goa.design/goa/examples/error/gen/divider"
	dividerpb "goa.design/goa/examples/error/gen/grpc/divider"
)

// BuildIntegerDividePayload builds the payload for the divider integer_divide
// endpoint from CLI flags.
func BuildIntegerDividePayload(dividerIntegerDivideP string) (*dividersvc.IntOperands, error) {
	var err error
	var p dividerpb.IntOperands
	{
		if dividerIntegerDivideP != "" {
			err = json.Unmarshal([]byte(dividerIntegerDivideP), &p)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for p, example of valid JSON:\n%s", "'{\n      \"a\": 1956314822264574800,\n      \"b\": 9076451438121458831\n   }'")
			}
		}
	}
	if err != nil {
		return nil, err
	}
	v := &dividersvc.IntOperands{
		A: int(p.A),
		B: int(p.B),
	}
	return v, nil
}

// BuildDividePayload builds the payload for the divider divide endpoint from
// CLI flags.
func BuildDividePayload(dividerDivideP string) (*dividersvc.FloatOperands, error) {
	var err error
	var p dividerpb.FloatOperands
	{
		if dividerDivideP != "" {
			err = json.Unmarshal([]byte(dividerDivideP), &p)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for p, example of valid JSON:\n%s", "'{\n      \"a\": 0.858635429996671,\n      \"b\": 0.15144678048841884\n   }'")
			}
		}
	}
	if err != nil {
		return nil, err
	}
	v := &dividersvc.FloatOperands{
		A: p.A,
		B: p.B,
	}
	return v, nil
}
