// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// divider gRPC client encoders and decoders
//
// Command:
// $ goa gen goa.design/goa/examples/error/design -o
// $(GOPATH)/src/goa.design/goa/examples/error

package client

import (
	"context"

	dividersvc "goa.design/goa/examples/error/gen/divider"
	dividerpb "goa.design/goa/examples/error/gen/grpc/divider"
	goagrpc "goa.design/goa/grpc"
)

// EncodeIntegerDivideRequest encodes requests sent to divider integer_divide
// endpoint.
func EncodeIntegerDivideRequest(ctx context.Context, v interface{}) (interface{}, error) {
	p, ok := v.(*dividersvc.IntOperands)
	if !ok {
		return nil, goagrpc.ErrInvalidType("divider", "integer_divide", "*dividersvc.IntOperands", v)
	}
	return NewIntegerDivideRequest(p), nil
}

// DecodeIntegerDivideResponse decodes responses from the divider
// integer_divide endpoint.
func DecodeIntegerDivideResponse(ctx context.Context, v interface{}) (interface{}, error) {
	resp, ok := v.(*dividerpb.IntegerDivideResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("divider", "integer_divide", "*dividerpb.IntegerDivideResponse", v)
	}
	res := NewIntegerDivideResponse(resp)
	return res, nil
}

// EncodeDivideRequest encodes requests sent to divider divide endpoint.
func EncodeDivideRequest(ctx context.Context, v interface{}) (interface{}, error) {
	p, ok := v.(*dividersvc.FloatOperands)
	if !ok {
		return nil, goagrpc.ErrInvalidType("divider", "divide", "*dividersvc.FloatOperands", v)
	}
	return NewDivideRequest(p), nil
}

// DecodeDivideResponse decodes responses from the divider divide endpoint.
func DecodeDivideResponse(ctx context.Context, v interface{}) (interface{}, error) {
	resp, ok := v.(*dividerpb.DivideResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("divider", "divide", "*dividerpb.DivideResponse", v)
	}
	res := NewDivideResponse(resp)
	return res, nil
}
