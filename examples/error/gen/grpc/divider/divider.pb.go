// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gen/grpc/divider/divider.proto

/*
Package divider is a generated protocol buffer package.

It is generated from these files:
	gen/grpc/divider/divider.proto

It has these top-level messages:
	IntOperands
	IntegerDivideResponse
	FloatOperands
	DivideResponse
*/
package divider

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IntOperands struct {
	// Left operand
	A int32 `protobuf:"zigzag32,1,opt,name=a" json:"a,omitempty"`
	// Right operand
	B int32 `protobuf:"zigzag32,2,opt,name=b" json:"b,omitempty"`
}

func (m *IntOperands) Reset()                    { *m = IntOperands{} }
func (m *IntOperands) String() string            { return proto.CompactTextString(m) }
func (*IntOperands) ProtoMessage()               {}
func (*IntOperands) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IntOperands) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *IntOperands) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

type IntegerDivideResponse struct {
	Field int32 `protobuf:"zigzag32,1,opt,name=field" json:"field,omitempty"`
}

func (m *IntegerDivideResponse) Reset()                    { *m = IntegerDivideResponse{} }
func (m *IntegerDivideResponse) String() string            { return proto.CompactTextString(m) }
func (*IntegerDivideResponse) ProtoMessage()               {}
func (*IntegerDivideResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IntegerDivideResponse) GetField() int32 {
	if m != nil {
		return m.Field
	}
	return 0
}

type FloatOperands struct {
	// Left operand
	A float64 `protobuf:"fixed64,1,opt,name=a" json:"a,omitempty"`
	// Right operand
	B float64 `protobuf:"fixed64,2,opt,name=b" json:"b,omitempty"`
}

func (m *FloatOperands) Reset()                    { *m = FloatOperands{} }
func (m *FloatOperands) String() string            { return proto.CompactTextString(m) }
func (*FloatOperands) ProtoMessage()               {}
func (*FloatOperands) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FloatOperands) GetA() float64 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *FloatOperands) GetB() float64 {
	if m != nil {
		return m.B
	}
	return 0
}

type DivideResponse struct {
	Field float64 `protobuf:"fixed64,1,opt,name=field" json:"field,omitempty"`
}

func (m *DivideResponse) Reset()                    { *m = DivideResponse{} }
func (m *DivideResponse) String() string            { return proto.CompactTextString(m) }
func (*DivideResponse) ProtoMessage()               {}
func (*DivideResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DivideResponse) GetField() float64 {
	if m != nil {
		return m.Field
	}
	return 0
}

func init() {
	proto.RegisterType((*IntOperands)(nil), "divider.IntOperands")
	proto.RegisterType((*IntegerDivideResponse)(nil), "divider.IntegerDivideResponse")
	proto.RegisterType((*FloatOperands)(nil), "divider.FloatOperands")
	proto.RegisterType((*DivideResponse)(nil), "divider.DivideResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Divider service

type DividerClient interface {
	// IntegerDivide implements integer_divide.
	IntegerDivide(ctx context.Context, in *IntOperands, opts ...grpc.CallOption) (*IntegerDivideResponse, error)
	// Divide implements divide.
	Divide(ctx context.Context, in *FloatOperands, opts ...grpc.CallOption) (*DivideResponse, error)
}

type dividerClient struct {
	cc *grpc.ClientConn
}

func NewDividerClient(cc *grpc.ClientConn) DividerClient {
	return &dividerClient{cc}
}

func (c *dividerClient) IntegerDivide(ctx context.Context, in *IntOperands, opts ...grpc.CallOption) (*IntegerDivideResponse, error) {
	out := new(IntegerDivideResponse)
	err := grpc.Invoke(ctx, "/divider.divider/IntegerDivide", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dividerClient) Divide(ctx context.Context, in *FloatOperands, opts ...grpc.CallOption) (*DivideResponse, error) {
	out := new(DivideResponse)
	err := grpc.Invoke(ctx, "/divider.divider/Divide", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Divider service

type DividerServer interface {
	// IntegerDivide implements integer_divide.
	IntegerDivide(context.Context, *IntOperands) (*IntegerDivideResponse, error)
	// Divide implements divide.
	Divide(context.Context, *FloatOperands) (*DivideResponse, error)
}

func RegisterDividerServer(s *grpc.Server, srv DividerServer) {
	s.RegisterService(&_Divider_serviceDesc, srv)
}

func _Divider_IntegerDivide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntOperands)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DividerServer).IntegerDivide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/divider.divider/IntegerDivide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DividerServer).IntegerDivide(ctx, req.(*IntOperands))
	}
	return interceptor(ctx, in, info, handler)
}

func _Divider_Divide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FloatOperands)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DividerServer).Divide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/divider.divider/Divide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DividerServer).Divide(ctx, req.(*FloatOperands))
	}
	return interceptor(ctx, in, info, handler)
}

var _Divider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "divider.divider",
	HandlerType: (*DividerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IntegerDivide",
			Handler:    _Divider_IntegerDivide_Handler,
		},
		{
			MethodName: "Divide",
			Handler:    _Divider_Divide_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gen/grpc/divider/divider.proto",
}

func init() { proto.RegisterFile("gen/grpc/divider/divider.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0x4f, 0xcd, 0xd3,
	0x4f, 0x2f, 0x2a, 0x48, 0xd6, 0x4f, 0xc9, 0x2c, 0xcb, 0x4c, 0x49, 0x2d, 0x82, 0xd1, 0x7a, 0x05,
	0x45, 0xf9, 0x25, 0xf9, 0x42, 0xec, 0x50, 0xae, 0x92, 0x26, 0x17, 0xb7, 0x67, 0x5e, 0x89, 0x7f,
	0x41, 0x6a, 0x51, 0x62, 0x5e, 0x4a, 0xb1, 0x10, 0x0f, 0x17, 0x63, 0xa2, 0x04, 0xa3, 0x02, 0xa3,
	0x86, 0x60, 0x10, 0x63, 0x22, 0x88, 0x97, 0x24, 0xc1, 0x04, 0xe1, 0x25, 0x29, 0xe9, 0x72, 0x89,
	0x7a, 0xe6, 0x95, 0xa4, 0xa6, 0xa7, 0x16, 0xb9, 0x80, 0x35, 0x07, 0xa5, 0x16, 0x17, 0xe4, 0xe7,
	0x15, 0xa7, 0x0a, 0x89, 0x70, 0xb1, 0xa6, 0x65, 0xa6, 0xe6, 0xa4, 0x40, 0x35, 0x42, 0x38, 0x4a,
	0xda, 0x5c, 0xbc, 0x6e, 0x39, 0xf9, 0x89, 0x58, 0xcc, 0x66, 0x44, 0x31, 0x9b, 0x11, 0x64, 0xb6,
	0x1a, 0x17, 0x1f, 0x3e, 0x43, 0x19, 0xa1, 0x86, 0x1a, 0x75, 0x33, 0x72, 0xc1, 0x9c, 0x2e, 0xe4,
	0xca, 0xc5, 0x8b, 0xe2, 0x1e, 0x21, 0x11, 0x3d, 0x98, 0x27, 0x91, 0xbc, 0x24, 0x25, 0x87, 0x2c,
	0x8a, 0xc5, 0xf5, 0x96, 0x5c, 0x6c, 0x50, 0xfd, 0x62, 0x70, 0x95, 0x28, 0x0e, 0x97, 0x12, 0x87,
	0x8b, 0xa3, 0x6a, 0x4d, 0x62, 0x03, 0x07, 0xa6, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x6f, 0x78,
	0xd0, 0xf5, 0x6e, 0x01, 0x00, 0x00,
}
