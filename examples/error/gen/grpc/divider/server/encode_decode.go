// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// divider GRPC server encoders and decoders
//
// Command:
// $ goa gen goa.design/goa/examples/error/design -o
// $(GOPATH)/src/goa.design/goa/examples/error

package server

import (
	"context"

	dividersvc "goa.design/goa/examples/error/gen/divider"
	dividerpb "goa.design/goa/examples/error/gen/grpc/divider"
)

// EncodeIntegerDivideResponse encodes responses from the divider
// integer_divide endpoint.
func EncodeIntegerDivideResponse(ctx context.Context, v interface{}) *dividerpb.IntegerDivideResponse {
	res := v.(int)
	resp := NewIntegerDivideResponse(res)
	return resp
}

// DecodeIntegerDivideRequest decodes requests sent to divider integer_divide
// endpoint.
func DecodeIntegerDivideRequest(ctx context.Context, message *dividerpb.IntegerDivideRequest) (*dividersvc.IntOperands, error) {
	var (
		payload *dividersvc.IntOperands
		err     error
	)
	{
		payload = NewIntOperands(message)
	}
	return payload, err
}

// EncodeDivideResponse encodes responses from the divider divide endpoint.
func EncodeDivideResponse(ctx context.Context, v interface{}) *dividerpb.DivideResponse {
	res := v.(float64)
	resp := NewDivideResponse(res)
	return resp
}

// DecodeDivideRequest decodes requests sent to divider divide endpoint.
func DecodeDivideRequest(ctx context.Context, message *dividerpb.DivideRequest) (*dividersvc.FloatOperands, error) {
	var (
		payload *dividersvc.FloatOperands
		err     error
	)
	{
		payload = NewFloatOperands(message)
	}
	return payload, err
}
