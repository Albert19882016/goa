// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// divider GRPC server
//
// Command:
// $ goa gen goa.design/goa/examples/error/design -o
// $(GOPATH)/src/goa.design/goa/examples/error

package server

import (
	"context"

	dividersvc "goa.design/goa/examples/error/gen/divider"
	dividerpb "goa.design/goa/examples/error/gen/grpc/divider"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// Server implements the dividerpb.DividerServer interface.
type Server struct {
	endpoints *dividersvc.Endpoints
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the divider service endpoints.
func New(e *dividersvc.Endpoints) *Server {
	return &Server{e}
}

// IntegerDivide implements the "IntegerDivide" method in
// dividerpb.DividerServer interface.
func (s *Server) IntegerDivide(ctx context.Context, p *dividerpb.IntOperands) (*dividerpb.IntegerDivideResponse, error) {
	payload := NewIntOperands(p)
	v, err := s.endpoints.IntegerDivide(ctx, payload)
	if err != nil {
		en, ok := err.(ErrorNamer)
		if !ok {
			return nil, err
		}
		switch en.ErrorName() {
		case "has_remainder":
			return nil, status.Error(codes.Unknown, err.Error())
		case "div_by_zero":
			return nil, status.Error(codes.InvalidArgument, err.Error())
		case "timeout":
			return nil, status.Error(codes.DeadlineExceeded, err.Error())
		}
	}
	res := v.(int)
	resp := NewIntegerDivideResponse(res)
	return resp, nil
}

// Divide implements the "Divide" method in dividerpb.DividerServer interface.
func (s *Server) Divide(ctx context.Context, p *dividerpb.FloatOperands) (*dividerpb.DivideResponse, error) {
	payload := NewFloatOperands(p)
	v, err := s.endpoints.Divide(ctx, payload)
	if err != nil {
		en, ok := err.(ErrorNamer)
		if !ok {
			return nil, err
		}
		switch en.ErrorName() {
		case "div_by_zero":
			return nil, status.Error(codes.InvalidArgument, err.Error())
		case "timeout":
			return nil, status.Error(codes.DeadlineExceeded, err.Error())
		}
	}
	res := v.(float64)
	resp := NewDivideResponse(res)
	return resp, nil
}
